@page "/"
@rendermode InteractiveServer
@using System.Timers

@code 
{
    private ulong currentCount = 0, rounded = 0;
    int click_plus = 1, timer_plus = 0;
    int[] grade_count = new int[] { 0, 0, 0, 0, 0, 0, 0 }, grade_count_sec = new int[] { 0, 0, 0, 0, 0, 0, 0 };
    private double[] base_cost = new double[] { 500, 4600, 12000, 35000, 82000, 160000, 250000, 800000 }, base_cost_timer = new double[] { 50, 600, 1500, 4000, 10000, 30000, 100000 };
    private int[] scorePerSec = new int[] { 1, 3, 5, 10, 20, 40, 80 }, scorePerClick = new int[] { 5, 15, 30, 50, 100, 250, 500, 1000 };
    Timer? timer1;
    private bool isTimerActive = false;
    bool[] grade_flag = new bool[] { false, false, false, false, false, false, false, false };
    private List<FloatingScore> floatingPoints = new();

    public class FloatingScore
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public ulong Value { get; set; }
        public string Xpx { get; set; }
        public string Ypx { get; set; }
    }

    public void Button_click()
    {
        ulong earned = (ulong)click_plus;
        currentCount += earned;

        var fx = new FloatingScore
        {
            Value = earned,
            Xpx = new Random().Next(50, 400) + "px",
            Ypx = new Random().Next(0, 30) + "px"
        };

        floatingPoints.Add(fx);
        InvokeAsync(StateHasChanged); // заставим Blazor сразу обновить DOM

        var localFx = fx;
        _ = Task.Delay(2000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                floatingPoints.Remove(localFx);
                StateHasChanged();
            });
        });


    }

    public double CostClickCalc(double base_cost, int grade_count)
    {
        rounded = (ulong)Math.Round(base_cost);
        currentCount -= rounded;
        base_cost += base_cost * (Math.Pow(1.07, grade_count));
        Math.Round(base_cost);
        return base_cost;
    }

    public void Upgrades_click(int index)
    {
        // Проверка выхода за границы массива (на всякий случай)
        if (index < 0 || index >= base_cost.Length)
            return;

        if ((currentCount >= base_cost[index]) && !grade_flag[index])
        {
            grade_count[index]++;
            currentCount -= (ulong)base_cost[index];
            click_plus += scorePerClick[index];
            grade_flag[index] = true;
        }
    }

    public void Upgrades_timer(int flag)
    {

        if (!isTimerActive)
        {
            timer1 = new Timer(1000);
            timer1.Elapsed += (sender, e) =>
            {
                currentCount += (ulong)timer_plus;
                InvokeAsync(StateHasChanged);
            };
            timer1.AutoReset = true;
            timer1.Start();
            isTimerActive = true;
        }

        switch (flag)
        {
            case 0:
                if (currentCount >= base_cost_timer[0])
                {
                    grade_count_sec[0]++;
                    rounded = (ulong)Math.Round(base_cost_timer[0]);
                    currentCount -= rounded;
                    base_cost_timer[0] += base_cost_timer[0] * 0.20;
                    Math.Round(base_cost_timer[0]);

                    timer_plus++; 
                }
                break;
            case 1:
                if (currentCount >= base_cost_timer[1])
                {
                    grade_count_sec[1]++;
                    rounded = (ulong)Math.Round(base_cost_timer[1]);
                    currentCount -= rounded;
                    base_cost_timer[1] += base_cost_timer[1] * 0.20;
                    Math.Round(base_cost_timer[1]);

                    timer_plus += 2;
                }
                break;
        }
    }

}

<PageTitle>Кликер</PageTitle>
<div class="container background m-0 min-vw-100 min-vh-100">
    <div class="row">
        <div class="col-3 d-flex flex-column align-items-center justify-content-center">
            <h1 role="status">Количество очков: @currentCount</h1>
            <h2>Очков за клик: @click_plus</h2>
            <h2>Очков в секунду: @timer_plus</h2>
            <div style="position: relative;">
                <button class="main_button" @onclick="Button_click">
                    <img class="button_img" src="/img/Neolith_but.png" alt="Score_Button" />
                </button>

                @foreach (var fx in floatingPoints)
                {
                    var style = $"position:absolute; left:{fx.Xpx}; top:{fx.Ypx}; color: black";

                    <div class="floating-score" style="@style" @key="fx.Id">
                        +@fx.Value
                    </div>
                }
            </div>
        </div>
        <div class="col-7"></div>
        <div class="col-2">
            <div class="upgrades">
                @for (int i = 0; i < 7; i++)
                {
                    int flag = i;
                    if (grade_count[flag] == 1) continue;

                    <button @onclick="() => Upgrades_click(flag)">

                        @* <div class="card-body">
                            <p>Улучшение +@scorePerClick[flag] к нажатию</p>
                            <p>Стоимость: @base_cost[flag]</p>
                        </div> *@
                    </button>
                }

                @for (int i = 0; i < 7; i++)
                {
                    int flag = i;
                    <div class="card">
                        <button @onclick="() => Upgrades_timer(flag)">
                            <div class="card-body">
                                <p>Улучшение +@scorePerSec[i] в секунду</p>
                                <p>Стоимость: @Math.Round(base_cost_timer[i], 0)</p>
                                <p>Количество: @grade_count_sec[i]</p>
                            </div>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


