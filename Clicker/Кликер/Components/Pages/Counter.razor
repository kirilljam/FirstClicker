@page "/"
@rendermode InteractiveServer
@using System.Timers

@code 
{
    private ulong currentCount = 0, rounded = 0;
    int click_plus = 1, timer_plus = 0;
    int[] grade_count = new int[] { 0, 0, 0, 0, 0, 0, 0 };
    private double[] base_cost = new double[] { 15, 100, 600, 1500, 4000, 10000, 25000 }, base_cost_timer = new double[] { 200, 600, 2000, 6000, 13000, 38000, 78000 };
    private int[] scorePerSec = new int[] { 1, 2, 5, 10, 20, 40, 80 };
    Timer? timer1, timer2;
    private bool isTimerActive = false;

    public void Button_click()
    {
        currentCount += (ulong)click_plus;
    }

    public double CostClickCalc(double base_cost, int grade_count)
    {
        rounded = (ulong)Math.Round(base_cost);
        currentCount -= rounded;
        base_cost += base_cost * (Math.Pow(1.07, grade_count));
        Math.Round(base_cost);
        return base_cost;
    }

    public void Upgrades_click(int flag)
    {
        switch (flag)
        {
            case 1:
                if (currentCount >= base_cost[0])
                {
                    grade_count[0]++;
                    base_cost[0] = CostClickCalc(base_cost[0], grade_count[0]);
                    click_plus++;
                    
                }
                break;
            case 2:
                if (currentCount >= base_cost[1])
                {
                    grade_count[1]++;
                    base_cost[1] = CostClickCalc(base_cost[1], grade_count[1]);
                    click_plus += 2;
                }
                break;
            case 4:
                if (currentCount >= base_cost[2])
                {
                    grade_count[2]++;
                    base_cost[2] = CostClickCalc(base_cost[2], grade_count[2]);
                    click_plus += 4;
                }
                break;
            case 8:
                if (currentCount >= base_cost[3])
                {
                    grade_count[3]++;
                    base_cost[3] = CostClickCalc(base_cost[3], grade_count[3]);
                    click_plus += 8;
                }
                break;
            case 16:
                if (currentCount >= base_cost[4])
                {
                    grade_count[4]++;
                    base_cost[4] = CostClickCalc(base_cost[4], grade_count[4]);
                    click_plus += 16;
                }
                break;
            case 32:
                if (currentCount >= base_cost[5])
                {
                    grade_count[5]++;
                    base_cost[5] = CostClickCalc(base_cost[5], grade_count[5]);
                    click_plus += 32;
                }
                break;
            case 64:
                if (currentCount >= base_cost[5])
                {
                    grade_count[6]++;
                    base_cost[6] = CostClickCalc(base_cost[6], grade_count[6]);
                    click_plus += 64;
                }
                break;
        }
    }

    public void Upgrades_timer(int flag)
    {
        if (!isTimerActive)
        {
            timer1 = new Timer(1000);
            timer1.Elapsed += (sender, e) =>
            {
                currentCount += (ulong)timer_plus;
                InvokeAsync(StateHasChanged);
            };
            timer1.AutoReset = true;
            timer1.Start();
            isTimerActive = true;
        }

        switch (flag)
        {
            case 1:
                if (currentCount >= base_cost_timer[0])
                {
                    rounded = (ulong)Math.Round(base_cost_timer[0]);
                    currentCount -= rounded;
                    base_cost_timer[0] += base_cost_timer[0] * 0.20;
                    Math.Round(base_cost_timer[0]);

                    timer_plus++; 
                }
                break;
            case 2:
                if (currentCount >= base_cost_timer[1])
                {
                    rounded = (ulong)Math.Round(base_cost_timer[1]);
                    currentCount -= rounded;
                    base_cost_timer[1] += base_cost_timer[1] * 0.20;
                    Math.Round(base_cost_timer[1]);

                    timer_plus += 2;
                }
                break;
        }
    }

}

<PageTitle>Кликер</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-8">
            <h1 role="status">Количество очков: @currentCount</h1>
            <h2>Очков за клик: @click_plus</h2>
            <h2>Очков в секунду: @timer_plus</h2>
            <button class="" @onclick="Button_click">
                <svg class="circle"></svg>
            </button>
        </div>
        <div class="col-4">
            <div class="upgrades">
                @for (int i = 0; i < 7; i++)
                {
                    int pot = 0;
                    pot = (int)Math.Pow(2, i);
                    <div class="card">
                        <button @onclick="() => Upgrades_click(pot)">
                            <div class="card-body">
                                <p>Улучшение +@pot к нажатию</p>
                                <p>Стоимость: @Math.Round(base_cost[i])</p>
                                <p>Количество улучшений: @grade_count[i]</p>
                            </div>
                        </button>
                    </div>
                }
     
                <div class="card">
                    <button @onclick="() => Upgrades_timer(1)">
                        <div class="card-body">
                            <p>Улучшение +1 в секунду</p>
                            <span>@Math.Round(base_cost_timer[0], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_timer(2)">
                        <div class="card-body">
                            <p>Улучшение +2 в секунду</p>
                            <span>@Math.Round(base_cost_timer[1], 2)</span>
                        </div>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


