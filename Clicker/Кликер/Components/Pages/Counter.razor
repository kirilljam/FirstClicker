@page "/"
@rendermode InteractiveServer
@using System.Timers

@code 
{
    private int currentCount = 0;
    int click_plus = 1, rounded = 0, timer1Upgrades = 0, timer2Upgrades = 0;
    double[] base_cost = new double[] { 15, 120, 1100, 25300, 111000, 1333000, 28000000 };
    double[] base_cost_timer = new double[] { 100, 1000, 11000, 253000, 1110000, 13330000, 280000000 };
    private int[] scorePerSec = new int[] { 1, 2 };
    Timer? timer1, timer2;
    private bool isTimer1Active = false;
    private bool isTimer2Active = false;

    public void Button_click()
    {
        currentCount += click_plus;
    }

    public void Upgrades_click(int flag)
    {
        switch (flag)
        {
            case 1:
                if (currentCount >= base_cost[0])
                {
                    rounded = (int)Math.Round(base_cost[0]);
                    currentCount -= rounded;
                    base_cost[0] += base_cost[0] * 0.20;
                    Math.Round(base_cost[0]);
                    click_plus++;
                }
                break;
            case 2:
                if (currentCount >= base_cost[1])
                {
                    rounded = (int)Math.Round(base_cost[1]);
                    currentCount -= rounded;
                    base_cost[1] += base_cost[1] * 0.20;
                    Math.Round(base_cost[1]);
                    click_plus += 2;
                }
                break;
            case 4:
                if (currentCount >= base_cost[2])
                {
                    rounded = (int)Math.Round(base_cost[2]);
                    currentCount -= rounded;
                    base_cost[2] += base_cost[2] * 0.20;
                    Math.Round(base_cost[2]);
                    click_plus += 4;
                }
                break;
            case 8:
                if (currentCount >= base_cost[3])
                {
                    rounded = (int)Math.Round(base_cost[3]);
                    currentCount -= rounded;
                    base_cost[3] += base_cost[3] * 0.20;
                    Math.Round(base_cost[3]);
                    click_plus += 8;
                }
                break;
            case 16:
                if (currentCount >= base_cost[4])
                {
                    rounded = (int)Math.Round(base_cost[4]);
                    currentCount -= rounded;
                    base_cost[4] += base_cost[4] * 0.20;
                    Math.Round(base_cost[4]);
                    click_plus += 16;
                }
                break;
            case 32:
                if (currentCount >= base_cost[5])
                {
                    rounded = (int)Math.Round(base_cost[2]);
                    currentCount -= rounded;
                    base_cost[5] += base_cost[5] * 0.20;
                    Math.Round(base_cost[5]);
                    click_plus += 32;
                }
                break;
            case 64:
                if (currentCount >= base_cost[5])
                {
                    rounded = (int)Math.Round(base_cost[6]);
                    currentCount -= rounded;
                    base_cost[6] += base_cost[6] * 0.20;
                    Math.Round(base_cost[6]);
                    click_plus += 64;
                }
                break;
        }
    }

    public void Upgrades_timer(int flag)
    {
        switch (flag)
        {
            case 1:
                if (currentCount >= base_cost_timer[0])
                {
                    rounded = (int)Math.Round(base_cost_timer[0]);
                    currentCount -= rounded;
                    base_cost_timer[0] += base_cost_timer[0] * 0.20;
                    Math.Round(base_cost_timer[0]);

                    timer1Upgrades++;

                    if (!isTimer1Active)
                    {
                        timer1 = new Timer(1000);
                        timer1.Elapsed += (sender, e) =>
                        {
                            currentCount += timer1Upgrades;
                            InvokeAsync(StateHasChanged);
                        };
                        timer1.AutoReset = true;
                        timer1.Start();
                        isTimer1Active = true;
                    }

                }
                break;
            case 2:
                if (currentCount >= base_cost_timer[1])
                {
                    rounded = (int)Math.Round(base_cost_timer[1]);
                    currentCount -= rounded;
                    base_cost_timer[1] += base_cost_timer[1] * 0.20;
                    Math.Round(base_cost_timer[1]);

                    timer2Upgrades += 2;

                    if (!isTimer2Active)
                    {
                        timer2 = new Timer(1000);
                        timer2.Elapsed += (sender, e) =>
                        {
                            currentCount += timer2Upgrades;
                            InvokeAsync(StateHasChanged);
                        };
                        timer2.AutoReset = true;
                        timer2.Start();
                        isTimer1Active = true;
                    }
                }
                break;
        }
    }

}

<PageTitle>Counter</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-8">
            <h1 role="status">Current count: @currentCount</h1>
            <h2>Current click: @click_plus</h2>
            <button class="" @onclick="Button_click">
                <svg id="circle"></svg>
            </button>
        </div>
        <div class="col-4">
            <div class="upgrades">
                <div class="card">
                    <button @onclick="() => Upgrades_click(1)">
                        <div class="card-body">
                            <p>Улучшение +1 к нажатию</p>
                            <span>@Math.Round(base_cost[0], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(2)">
                        <div class="card-body">
                            <p>Улучшение +2 к нажатию</p>
                            <span>@Math.Round(base_cost[1], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(4)">
                        <div class="card-body">
                            <p>Улучшение +4 к нажатию</p>
                            <span>@Math.Round(base_cost[2], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(8)">
                        <div class="card-body">
                            <p>Улучшение +8 к нажатию</p>
                            <span>@Math.Round(base_cost[3], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(16)">
                        <div class="card-body">
                            <p>Улучшение +16 к нажатию</p>
                            <span>@Math.Round(base_cost[4], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(32)">
                        <div class="card-body">
                            <p>Улучшение +32 к нажатию</p>
                            <span>@Math.Round(base_cost[5], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_click(64)">
                        <div class="card-body">
                            <p>Улучшение +64 к нажатию</p>
                            <span>@Math.Round(base_cost[6], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_timer(1)">
                        <div class="card-body">
                            <p>Улучшение +1 в секунду</p>
                            <span>@Math.Round(base_cost_timer[0], 2)</span>
                        </div>
                    </button>
                </div>
                <div class="card">
                    <button @onclick="() => Upgrades_timer(2)">
                        <div class="card-body">
                            <p>Улучшение +2 в секунду</p>
                            <span>@Math.Round(base_cost_timer[1], 2)</span>
                        </div>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


